name: Release (manual)

on:
  workflow_dispatch:
    inputs:
      versionName:
        description: "e.g. 1.0.1"
        required: true
      tag:
        description: "e.g. v1.0.1"
        required: true
      notes:
        description: "Release notes (optional)"
        required: false
      generateReleaseNotes:
        description: "Use auto-generated notes? true/false"
        required: false
        default: "false"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions: { contents: write }

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: "21" }
      - uses: gradle/actions/setup-gradle@v3

      # (A) Соберём контекст: коммиты, PR, diffstat
      - name: Collect context for AI notes
        id: ctx
        run: |
          set -euo pipefail
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            RANGE="$LAST_TAG..HEAD"
          else
            RANGE=""
          fi

          echo "## Commit log" > CONTEXT.md
          if [ -n "$RANGE" ]; then
            git --no-pager log $RANGE --pretty=format:'- %s (%h) | %an' >> CONTEXT.md
          else
            git --no-pager log --pretty=format:'- %s (%h) | %an' >> CONTEXT.md
          fi

          echo -e "\n\n## Diffstat" >> CONTEXT.md
          if [ -n "$RANGE" ]; then
            git diff --shortstat $RANGE >> CONTEXT.md || true
          else
            git diff --shortstat $(git hash-object -t tree /dev/null) HEAD >> CONTEXT.md || true
          fi

          # Ограничим размер, чтобы не переполнить prompt
          head -n 400 CONTEXT.md > CONTEXT_TRIMMED.md
          echo "path=CONTEXT_TRIMMED.md" >> "$GITHUB_OUTPUT"

      # (B) Сгенерим NOTES, если inputs.notes пустые
      - name: Generate release notes with LLM (if empty)
        if: ${{ github.event.inputs.notes == '' }}
        env:
          OPEN_ROUTER_API_KEY: ${{ secrets.OPEN_ROUTER_API_KEY }}
          VERSION_NAME: ${{ github.event.inputs.versionName }}
          TAG: ${{ github.event.inputs.tag }}
        run: |
          set -euo pipefail
          [ -n "${OPEN_ROUTER_API_KEY:-}" ] || { echo "OPEN_ROUTER_API_KEY not set"; exit 1; }

          SYS_PROMPT='Ты — Release Notes Writer. Кратко и по делу сформируй три секции:
          1) Key Features — 3–6 маркеров, пользовательски понятные.
          2) Technical — 3–6 пункта для разработчиков (SDK/миграции/архитектура).
          3) Breaking Changes — только если есть, иначе строка "None".
          Формат: Markdown, без прелюдий. Ограничь общий размер до ~1200 символов.'

          USER_PROMPT=$(printf "ВЕРСИЯ: %s (тег %s)\n\nКОНТЕКСТ:\n%s" \
            "$VERSION_NAME" "$TAG" "$(cat CONTEXT_TRIMMED.md)")

          JSON=$(jq -n \
            --arg sys "$SYS_PROMPT" \
            --arg usr "$USER_PROMPT" \
            '{
              "model":"openai/gpt-4o-mini",
              "messages":[
                {"role":"system","content":$sys},
                {"role":"user","content":$usr}
              ],
              "temperature":0.2
            }')

          RESP=$(curl -sS https://openrouter.ai/api/v1/chat/completions \
            -H "Authorization: Bearer ${OPEN_ROUTER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d "$JSON")

          NOTES=$(echo "$RESP" | jq -r '.choices[0].message.content // empty')
          [ -n "$NOTES" ] || NOTES="Bug fixes and improvements."
          printf "%s" "$NOTES" > GENERATED_NOTES.md
          echo "AI notes generated:"
          head -n 50 GENERATED_NOTES.md

      - name: Bump versionName & versionCode
        run: bash scripts/bump_version.sh "${{ github.event.inputs.versionName }}"

      - name: Commit version bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "chore: bump version to ${{ github.event.inputs.versionName }}" || echo "no changes"
          git push || true

      - name: Build Debug APK (always)
        run: ./gradlew :app:assembleDebug

      - name: Build Release Bundle if signing secrets present
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          set -euo pipefail
          if [ -n "${KEYSTORE_BASE64:-}" ] && [ -n "${KEYSTORE_PASSWORD:-}" ] && \
             [ -n "${KEY_ALIAS:-}" ] && [ -n "${KEY_PASSWORD:-}" ]; then
            echo "$KEYSTORE_BASE64" | base64 -d > keystore.jks
            echo "SIGNING_STORE_FILE=$GITHUB_WORKSPACE/keystore.jks" >> $GITHUB_ENV
            echo "SIGNING_STORE_PASSWORD=$KEYSTORE_PASSWORD"         >> $GITHUB_ENV
            echo "SIGNING_KEY_ALIAS=$KEY_ALIAS"                       >> $GITHUB_ENV
            echo "SIGNING_KEY_PASSWORD=$KEY_PASSWORD"                 >> $GITHUB_ENV
            ./gradlew :app:bundleRelease
          else
            echo "Signing secrets not present — skipping :app:bundleRelease"
          fi

      - name: Create GitHub Release (+upload)
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.event.inputs.tag }}
          name: ${{ github.event.inputs.versionName }}
          bodyFile: ${{ github.event.inputs.notes != '' && '' || 'GENERATED_NOTES.md' }}
          body: ${{ github.event.inputs.notes }}
          allowUpdates: true
          generateReleaseNotes: false
          artifacts: |
            app/build/outputs/apk/debug/**/*.apk
            app/build/outputs/bundle/release/**/*.aab

      # Notion — тоже проверяем внутри шага
      - name: Post to Notion (optional)
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DB: ${{ vars.NOTION_DB_RELEASES }}
          TAG:   ${{ github.event.inputs.tag }}
          VER:   ${{ github.event.inputs.versionName }}
          URL:   ${{ format('https://github.com/{0}/releases/tag/{1}', github.repository, github.event.inputs.tag) }}
          NOTES: ${{ github.event.inputs.notes }}
        run: |
          set -euo pipefail
          if [ -z "${NOTION_TOKEN:-}" ] || [ -z "${NOTION_DB:-}" ]; then
            echo "Notion token or DB missing — skipping Notion step"
            exit 0
          fi

          NOW=$(date -u +%FT%TZ)
          DATA=$(jq -n \
            --arg db "$NOTION_DB" \
            --arg ver "$VER" \
            --arg tag "$TAG" \
            --arg url "$URL" \
            --arg notes "${NOTES:-See GitHub release}" \
            --arg now "$NOW" '
            {
              parent: { database_id: $db },
              properties: {
                "Name": { title: [{ type: "text", text: { content: $ver } }] },
                "Tag":  { rich_text: [{ type: "text", text: { content: $tag } }] },
                "Release URL": { url: $url },
                "Released": { date: { start: $now } }
              },
              children: [
                { object:"block", type:"heading_2", heading_2:{ rich_text:[{ type:"text", text:{ content:"Changelog" } }] } },
                { object:"block", type:"paragraph", paragraph:{ rich_text:[{ type:"text", text:{ content:$notes } }] } }
              ]
            }')

          curl -sS -X POST "https://api.notion.com/v1/pages" \
            -H "Authorization: Bearer ${NOTION_TOKEN}" \
            -H "Content-Type: application/json" \
            -H "Notion-Version: 2022-06-28" \
            -d "$DATA" | jq .
